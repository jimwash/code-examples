/* global React */
/* global ReactQuill */
'use strict'
//define(['jquery', 'underscore', 'react', 'reactdom', 'reactwidgets', 'd3'], function ($, _, React, ReactDom, RactWidgets, d3) {
//	'use strict';

var dateTimePicker = ReactWidgets.DateTimePicker;
// ReactQuill = React.createFactory(ReactQuill);

// class Editor extends React.Component {
var Editor = React.createClass({
	getInitialState: function () {
		return {
			shownid: -1,
			theme: 'snow',
			enabled: true,
			readOnly: false,
			value: '',
			events: []
		};
	},

	setMessage: function(message) {
		this.setState({ subject: message.subject, value: message.message, toemail: message.toemail, value0: message.schedule })
        this.render();
	},
    
	formatRange: function (range) {
		return range
			? [range.start, range.end].join(',')
			: 'none';
	},

    toemail: '',
    
	onTextareaChange: function(event) {
		var value = event.target.value;
		this.setState({ value:value });
	},
	
	onSubjectTextareaChange: function(event) {
		var value = event.target.value;
		this.setState({ subject: value });
	},
		
	onEmailTextareaChange: function(event) {
		var value = event.target.value;
		this.setState({ toemail: value });
	},
	
	onEditorChange: function(value, delta, source) {
		this.setState({
			value: value,
			events: [
				'text-change('+this.state.value+' -> '+value+')'
			].concat(this.state.events)
		});
	},

	onEditorChangeSelection: function(range, source) {
		this.setState({
			selection: range,
			events: [
				'selection-change('+
					this.formatRange(this.state.selection)
				+' -> '+
					this.formatRange(range)
				+')'
			].concat(this.state.events)
		});
	},

	onToggle: function() {
		this.setState({ enabled: !this.state.enabled });
	},

	onToggleReadOnly: function() {
		this.setState({ readOnly: !this.state.readOnly });
	},

	handleClick: function(elem) {
	    console.log(this.state.value);
        var msg = new Message(this.state.value,this.state.toemail,this.state.subject,this.state.value0);
        var msgcollection = new Messages();
        var self = this;
        if (elem.currentTarget.textContent == "Insert") {
	        msgcollection.insert(msg).then(function(data) {

	        	console.log("DATA:"+data.id);
	            self.state.msgid = data.id;
	            console.log("SET:"+self.state.msgid)
	            self.props.onchange();
	        })
        } else if (elem.currentTarget.textContent == "Update" ) {
        	msg.id = this.state.id;
	        msgcollection.update(msg).then(function(data) {

	        	console.log("DATA:"+data.id);
	            self.state.msgid = data.id;
	            console.log("SET:"+self.state.msgid)
	            self.props.onchange();
	        })        	
        }

	},
    
	handleSend: function() {
		console.log("Send");
	    console.log(this.state.value);
		fetch('http://localhost:3010/mail', { method: "GET" });
	},
       
    
	render: function() {
		var change = (name, value) => this.setState({
	        ['value' + name]: value
	    });

	    if (this.props.data && this.props.data.id != this.state.id) {
	    	this.state.value = this.props.data.message;
	    	this.state.toemail = this.props.data.recipient;
	    	this.state.subject = this.props.data.subject;
	    	this.state.value0 = this.props.data.schedule;
	    	this.state.id = this.props.data.id;
		    this.setState({ shownid: this.props.data.id });
	    }

		return (

    			React.DOM.div({	style: { display:'block', width:700, height:260 }, },
				React.DOM.label({},"Loop Content"),
				this.state.enabled && ReactQuill({
					theme: this.state.theme,
					value: this.state.value,
					readOnly: this.state.readOnly,
					onChange: this.onEditorChange,
					placeholder: "What's on your mind?",
					onChangeSelection: this.onEditorChangeSelection
				}),
               React.DOM.table({className: "MyClassName"}, 
		        React.DOM.tbody(null, 
		            React.DOM.tr({}, 
		               React.DOM.td({style: {textAlign: 'right'}}, "Email Address:"),
		               React.DOM.td({},                 
		               	   React.DOM.textarea({
							  style: { display:'block', width:200, height:30 },
							  value: this.state.toemail,
							  onChange: this.onEmailTextareaChange
		                  }))
		            ),
		            React.DOM.tr({}, 
		               React.DOM.td({style: {textAlign: 'right'}}, "Subject:"),
		               React.DOM.td({}, 
			                React.DOM.textarea({
								style: { display:'block', width:200, height:30 },
								value: this.state.subject,
								onChange: this.onSubjectTextareaChange
			                }))               	
		            ),
		            React.DOM.tr({}, 
		               React.DOM.td({style: {textAlign: 'right'}}, "Delivery Schedule:"),
		               React.DOM.td({}, 
                            React.createElement(dateTimePicker,
                            	{name: 'date', value: new Date(this.state.value0), onChange: change.bind(null,'0')})

			            )               	
		            )
		        )),
                React.DOM.hr(),
                React.DOM.button( { className: "actionbutton", onClick: this.handleClick }, "Cancel" ),
				React.DOM.button( { className: "actionbutton", onClick: this.handleClick }, "Update" ),
				React.DOM.button( { className: "actionbutton", onClick: this.handleClick }, "Insert" ),
				React.DOM.button( { className: "actionbutton", onClick: this.handleSend }, "Send" )

			)
	    );
	},
    
	renderToolbar: function() {
		var state = this.state;
		var enabled = state.enabled;
		var readOnly = state.readOnly;
		var selection = this.formatRange(state.selection);
		return (
			React.DOM.div({},
				React.DOM.button({
					onClick: this.onToggle },
					enabled? 'Disable' : 'Enable'
				),
				React.DOM.button({
					onClick: this.onToggleReadOnly },
					'Set ' + (readOnly? 'read/Write' : 'read-only')
				),
				React.DOM.button({
					disabled: true },
					'Selection: ('+selection+')'
				)
			)
		);
	},

});